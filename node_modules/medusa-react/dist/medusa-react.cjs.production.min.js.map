{"version":3,"file":"medusa-react.cjs.production.min.js","sources":["../src/contexts/medusa.tsx","../src/contexts/session-cart.tsx","../src/hooks/utils/queryKeysFactory.ts","../src/helpers/index.ts","../src/hooks/store/products/queries.ts","../src/hooks/store/carts/queries.ts","../src/hooks/store/carts/mutations.ts","../src/hooks/store/shipping-options/queries.ts","../src/hooks/store/regions/queries.ts","../src/hooks/store/return-reasons/queries.ts","../src/hooks/store/swaps/queries.ts","../src/hooks/store/orders/queries.ts","../src/hooks/store/customers/queries.ts","../src/hooks/store/gift-cards/queries.ts","../src/hooks/store/collections/queries.ts","../src/contexts/cart.tsx","../src/hooks/admin/auth/queries.ts","../src/hooks/utils/buildOptions.ts","../src/hooks/admin/batch-jobs/queries.ts","../src/hooks/admin/orders/queries.ts","../src/hooks/admin/collections/queries.ts","../src/hooks/admin/currencies/queries.ts","../src/hooks/admin/customer-groups/queries.ts","../src/hooks/admin/customers/queries.ts","../src/hooks/admin/discounts/queries.ts","../src/hooks/admin/draft-orders/queries.ts","../src/hooks/admin/gift-cards/queries.ts","../src/hooks/admin/invites/queries.ts","../src/hooks/admin/notes/queries.ts","../src/hooks/admin/notifications/queries.ts","../src/hooks/admin/price-lists/queries.ts","../src/hooks/admin/products/queries.ts","../src/hooks/admin/variants/queries.ts","../src/hooks/admin/product-tags/queries.ts","../src/hooks/admin/product-types/queries.ts","../src/hooks/admin/regions/queries.ts","../src/hooks/admin/return-reasons/queries.ts","../src/hooks/admin/returns/queries.ts","../src/hooks/admin/sales-channels/queries.ts","../src/hooks/admin/shipping-options/queries.ts","../src/hooks/admin/shipping-profiles/queries.ts","../src/hooks/admin/store/queries.ts","../src/hooks/admin/swaps/queries.ts","../src/hooks/admin/tax-rates/queries.ts","../src/hooks/admin/users/queries.ts","../src/hooks/utils/useLocalStorage.ts","../src/hooks/admin/invites/mutations.ts","../src/hooks/admin/customer-groups/mutations.ts","../src/hooks/admin/collections/mutations.ts","../src/hooks/admin/sales-channels/mutations.ts","../src/hooks/admin/orders/mutations.ts","../src/hooks/admin/store/mutations.ts","../src/hooks/admin/batch-jobs/mutations.ts","../src/hooks/admin/claims/mutations.ts","../src/hooks/admin/returns/mutations.ts","../src/hooks/admin/swaps/mutations.ts","../src/hooks/admin/customers/mutations.ts","../src/hooks/admin/discounts/mutations.ts","../src/hooks/admin/draft-orders/mutations.ts","../src/hooks/admin/gift-cards/mutations.ts","../src/hooks/admin/notes/mutations.ts","../src/hooks/admin/uploads/mutations.ts","../src/hooks/admin/price-lists/mutations.ts","../src/hooks/admin/products/mutations.ts","../src/hooks/admin/tax-rates/mutations.ts","../src/hooks/admin/regions/mutations.ts","../src/hooks/admin/return-reasons/mutations.ts","../src/hooks/admin/shipping-options/mutations.ts","../src/hooks/admin/shipping-profiles/mutations.ts","../src/hooks/admin/users/mutations.ts","../src/hooks/admin/auth/mutations.ts","../src/hooks/admin/notifications/mutations.ts","../src/hooks/admin/currencies/mutations.ts","../src/hooks/store/customers/mutations.ts","../src/hooks/store/line-items/mutations.ts","../src/hooks/store/returns/mutations.ts","../src/hooks/store/swaps/mutations.ts"],"sourcesContent":["import React from \"react\"\nimport { QueryClientProvider, QueryClientProviderProps } from \"react-query\"\nimport Medusa from \"@medusajs/medusa-js\"\n\ninterface MedusaContextState {\n  client: Medusa\n}\n\nconst MedusaContext = React.createContext<MedusaContextState | null>(null)\n\nexport const useMedusa = () => {\n  const context = React.useContext(MedusaContext)\n  if (!context) {\n    throw new Error(\"useMedusa must be used within a MedusaProvider\")\n  }\n  return context\n}\n\ninterface MedusaProviderProps {\n  baseUrl: string\n  queryClientProviderProps: QueryClientProviderProps\n  children: React.ReactNode\n  apiKey?: string\n}\n\nexport const MedusaProvider = ({\n  queryClientProviderProps,\n  baseUrl,\n  apiKey,\n  children,\n}: MedusaProviderProps) => {\n  const medusaClient = new Medusa({ baseUrl, maxRetries: 0, apiKey })\n  return (\n    <QueryClientProvider {...queryClientProviderProps}>\n      <MedusaContext.Provider\n        value={{\n          client: medusaClient,\n        }}\n      >\n        {children}\n      </MedusaContext.Provider>\n    </QueryClientProvider>\n  )\n}\n","import React, { useContext, useEffect } from \"react\"\nimport { useLocalStorage } from \"../hooks/utils\"\nimport { RegionInfo, ProductVariant } from \"../types\"\nimport { getVariantPrice } from \"../helpers\"\nimport { isArray, isEmpty, isObject } from \"lodash\"\n\ninterface Item {\n  variant: ProductVariant\n  quantity: number\n  readonly total?: number\n}\n\nexport interface SessionCartState {\n  region: RegionInfo\n  items: Item[]\n  totalItems: number\n  total: number\n}\n\ninterface SessionCartContextState extends SessionCartState {\n  setRegion: (region: RegionInfo) => void\n  addItem: (item: Item) => void\n  removeItem: (id: string) => void\n  updateItem: (id: string, item: Partial<Item>) => void\n  setItems: (items: Item[]) => void\n  updateItemQuantity: (id: string, quantity: number) => void\n  incrementItemQuantity: (id: string) => void\n  decrementItemQuantity: (id: string) => void\n  getItem: (id: string) => Item | undefined\n  clearItems: () => void\n}\n\nconst SessionCartContext = React.createContext<SessionCartContextState | null>(\n  null\n)\n\nenum ACTION_TYPES {\n  INIT,\n  ADD_ITEM,\n  SET_ITEMS,\n  REMOVE_ITEM,\n  UPDATE_ITEM,\n  CLEAR_ITEMS,\n  SET_REGION,\n}\n\ntype Action =\n  | { type: ACTION_TYPES.SET_REGION; payload: RegionInfo }\n  | { type: ACTION_TYPES.INIT; payload: object }\n  | { type: ACTION_TYPES.ADD_ITEM; payload: Item }\n  | {\n      type: ACTION_TYPES.UPDATE_ITEM\n      payload: { id: string; item: Partial<Item> }\n    }\n  | { type: ACTION_TYPES.REMOVE_ITEM; payload: { id: string } }\n  | { type: ACTION_TYPES.SET_ITEMS; payload: Item[] }\n  | { type: ACTION_TYPES.CLEAR_ITEMS }\n\nconst reducer = (state: SessionCartState, action: Action) => {\n  switch (action.type) {\n    case ACTION_TYPES.INIT: {\n      return state\n    }\n    case ACTION_TYPES.SET_REGION: {\n      return generateCartState(\n        {\n          ...state,\n          region: action.payload,\n        },\n        state.items\n      )\n    }\n    case ACTION_TYPES.ADD_ITEM: {\n      const duplicateVariantIndex = state.items.findIndex(\n        item => item.variant.id === action.payload?.variant?.id\n      )\n      if (duplicateVariantIndex !== -1) {\n        state.items.splice(duplicateVariantIndex, 1)\n      }\n      const items = [...state.items, action.payload]\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.UPDATE_ITEM: {\n      const items = state.items.map(item =>\n        item.variant.id === action.payload.id\n          ? { ...item, ...action.payload.item }\n          : item\n      )\n\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.REMOVE_ITEM: {\n      const items = state.items.filter(\n        item => item.variant.id !== action.payload.id\n      )\n      return generateCartState(state, items)\n    }\n    case ACTION_TYPES.SET_ITEMS: {\n      return generateCartState(state, action.payload)\n    }\n    case ACTION_TYPES.CLEAR_ITEMS: {\n      return {\n        ...state,\n        items: [],\n        total: 0,\n        totalItems: 0,\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport const generateCartState = (state: SessionCartState, items: Item[]) => {\n  const newItems = generateItems(state.region, items)\n  return {\n    ...state,\n    items: newItems,\n    totalItems: items.reduce((sum, item) => sum + item.quantity, 0),\n    total: calculateSessionCartTotal(newItems),\n  }\n}\n\nconst generateItems = (region: RegionInfo, items: Item[]) => {\n  return items.map(item => ({\n    ...item,\n    total: getVariantPrice(item.variant, region),\n  }))\n}\n\nconst calculateSessionCartTotal = (items: Item[]) => {\n  return items.reduce(\n    (total, item) => total + item.quantity * (item.total || 0),\n    0\n  )\n}\n\ninterface SessionCartProviderProps {\n  children: React.ReactNode\n  initialState?: SessionCartState\n}\n\nconst defaultInitialState: SessionCartState = {\n  region: {} as RegionInfo,\n  items: [],\n  total: 0,\n  totalItems: 0,\n}\n\nexport const SessionCartProvider = ({\n  initialState = defaultInitialState,\n  children,\n}: SessionCartProviderProps) => {\n  const [saved, save] = useLocalStorage(\n    \"medusa-session-cart\",\n    JSON.stringify(initialState)\n  )\n\n  const [state, dispatch] = React.useReducer(reducer, JSON.parse(saved))\n\n  useEffect(() => {\n    save(JSON.stringify(state))\n  }, [state, save])\n\n  const setRegion = (region: RegionInfo) => {\n    if (!isObject(region) || isEmpty(region)) {\n      throw new Error(\"region must be a non-empty object\")\n    }\n\n    dispatch({ type: ACTION_TYPES.SET_REGION, payload: region })\n  }\n\n  const getItem = (id: string) => {\n    return state.items.find(item => item.variant.id === id)\n  }\n\n  const setItems = (items: Item[]) => {\n    if (!isArray(items)) {\n      throw new Error(\"items must be an array of items\")\n    }\n\n    dispatch({ type: ACTION_TYPES.SET_ITEMS, payload: items })\n  }\n\n  const addItem = (item: Item) => {\n    if (!isObject(item) || isEmpty(item)) {\n      throw new Error(\"item must be a non-empty object\")\n    }\n\n    dispatch({ type: ACTION_TYPES.ADD_ITEM, payload: item })\n  }\n\n  const updateItem = (id: string, item: Partial<Item>) => {\n    dispatch({ type: ACTION_TYPES.UPDATE_ITEM, payload: { id, item } })\n  }\n\n  const updateItemQuantity = (id: string, quantity: number) => {\n    const item = getItem(id)\n    if (!item) return\n\n    quantity = quantity <= 0 ? 1 : quantity\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: {\n          ...item,\n          quantity: Math.min(item.variant.inventory_quantity, quantity),\n        },\n      },\n    })\n  }\n\n  const incrementItemQuantity = (id: string) => {\n    const item = getItem(id)\n    if (!item) return\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: {\n          ...item,\n          quantity: Math.min(\n            item.variant.inventory_quantity,\n            item.quantity + 1\n          ),\n        },\n      },\n    })\n  }\n\n  const decrementItemQuantity = (id: string) => {\n    const item = getItem(id)\n    if (!item) return\n\n    dispatch({\n      type: ACTION_TYPES.UPDATE_ITEM,\n      payload: {\n        id,\n        item: { ...item, quantity: Math.max(0, item.quantity - 1) },\n      },\n    })\n  }\n\n  const removeItem = (id: string) => {\n    dispatch({\n      type: ACTION_TYPES.REMOVE_ITEM,\n      payload: { id },\n    })\n  }\n\n  const clearItems = () => {\n    dispatch({\n      type: ACTION_TYPES.CLEAR_ITEMS,\n    })\n  }\n\n  return (\n    <SessionCartContext.Provider\n      value={{\n        ...state,\n        setRegion,\n        addItem,\n        updateItem,\n        updateItemQuantity,\n        incrementItemQuantity,\n        decrementItemQuantity,\n        removeItem,\n        getItem,\n        setItems,\n        clearItems,\n      }}\n    >\n      {children}\n    </SessionCartContext.Provider>\n  )\n}\n\nexport const useSessionCart = () => {\n  const context = useContext(SessionCartContext)\n  if (!context) {\n    throw new Error(\n      \"useSessionCart should be used as a child of SessionCartProvider\"\n    )\n  }\n  return context\n}\n","import { TQueryKey } from \"../../types\"\n\nexport const queryKeysFactory = <\n  T,\n  TListQueryType = any,\n  TDetailQueryType = string\n>(\n  globalKey: T\n) => {\n  const queryKeyFactory: TQueryKey<T, TListQueryType, TDetailQueryType> = {\n    all: [globalKey],\n    lists: () => [...queryKeyFactory.all, \"list\"],\n    list: (query?: TListQueryType) => [...queryKeyFactory.lists(), { query }],\n    details: () => [...queryKeyFactory.all, \"detail\"],\n    detail: (id: TDetailQueryType) => [...queryKeyFactory.details(), id],\n  }\n  return queryKeyFactory\n}\n","import { isEmpty } from \"lodash\"\nimport { RegionInfo, ProductVariantInfo } from \"../types\"\n\ntype FormatVariantPriceParams = {\n  variant: ProductVariantInfo\n  region: RegionInfo\n  includeTaxes?: boolean\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\n/**\n * Takes a product variant and a region, and converts the variant's price to a localized decimal format\n */\nexport const formatVariantPrice = ({\n  variant,\n  region,\n  includeTaxes = true,\n  ...rest\n}: FormatVariantPriceParams) => {\n  const amount = computeVariantPrice({ variant, region, includeTaxes })\n\n  return convertToLocale({\n    amount,\n    currency_code: region?.currency_code,\n    ...rest,\n  })\n}\n\ntype ComputeVariantPriceParams = {\n  variant: ProductVariantInfo\n  region: RegionInfo\n  includeTaxes?: boolean\n}\n\n/**\n * Takes a product variant and region, and returns the variant price as a decimal number\n * @param params.variant - product variant\n * @param params.region - region\n * @param params.includeTaxes - whether to include taxes or not\n */\nexport const computeVariantPrice = ({\n  variant,\n  region,\n  includeTaxes = true,\n}: ComputeVariantPriceParams) => {\n  const amount = getVariantPrice(variant, region)\n\n  return computeAmount({\n    amount,\n    region,\n    includeTaxes,\n  })\n}\n\n/**\n * Finds the price amount correspoding to the region selected\n * @param variant - the product variant\n * @param region - the region\n * @returns - the price's amount\n */\nexport const getVariantPrice = (\n  variant: ProductVariantInfo,\n  region: RegionInfo\n) => {\n  let price = variant?.prices?.find(\n    p => p.currency_code.toLowerCase() === region?.currency_code?.toLowerCase()\n  )\n\n  return price?.amount || 0\n}\n\ntype ComputeAmountParams = {\n  amount: number\n  region: RegionInfo\n  includeTaxes?: boolean\n}\n\n/**\n * Takes an amount, a region, and returns the amount as a decimal including or excluding taxes\n */\nexport const computeAmount = ({\n  amount,\n  region,\n  includeTaxes = true,\n}: ComputeAmountParams) => {\n  const toDecimal = convertToDecimal(amount, region)\n\n  const taxRate = includeTaxes ? getTaxRate(region) : 0\n\n  const amountWithTaxes = toDecimal * (1 + taxRate)\n\n  return amountWithTaxes\n}\n\ntype FormatAmountParams = {\n  amount: number\n  region: RegionInfo\n  includeTaxes?: boolean\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n\n/**\n * Takes an amount and a region, and converts the amount to a localized decimal format\n */\nexport const formatAmount = ({\n  amount,\n  region,\n  includeTaxes = true,\n  ...rest\n}: FormatAmountParams) => {\n  const taxAwareAmount = computeAmount({\n    amount,\n    region,\n    includeTaxes,\n  })\n  return convertToLocale({\n    amount: taxAwareAmount,\n    currency_code: region.currency_code,\n    ...rest,\n  })\n}\n\n// we should probably add a more extensive list\nconst noDivisionCurrencies = [\"krw\", \"jpy\", \"vnd\"]\n\nconst convertToDecimal = (amount: number, region: RegionInfo) => {\n  const divisor = noDivisionCurrencies.includes(\n    region?.currency_code?.toLowerCase()\n  )\n    ? 1\n    : 100\n\n  return Math.floor(amount) / divisor\n}\n\nconst getTaxRate = (region?: RegionInfo) => {\n  return region && !isEmpty(region) ? region?.tax_rate / 100 : 0\n}\n\nconst convertToLocale = ({\n  amount,\n  currency_code,\n  minimumFractionDigits,\n  maximumFractionDigits,\n  locale = \"en-US\",\n}: ConvertToLocaleParams) => {\n  return currency_code && !isEmpty(currency_code)\n    ? new Intl.NumberFormat(locale, {\n        style: \"currency\",\n        currency: currency_code,\n        minimumFractionDigits,\n        maximumFractionDigits,\n      }).format(amount)\n    : amount.toString()\n}\n\ntype ConvertToLocaleParams = {\n  amount: number\n  currency_code: string\n  minimumFractionDigits?: number\n  maximumFractionDigits?: number\n  locale?: string\n}\n","import { Response } from \"@medusajs/medusa-js\"\nimport {\n  StoreGetProductsParams,\n  StoreProductsListRes,\n  StoreProductsRes,\n} from \"@medusajs/medusa\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst PRODUCTS_QUERY_KEY = `products` as const\n\nexport const productKeys = queryKeysFactory<\n  typeof PRODUCTS_QUERY_KEY,\n  StoreGetProductsParams\n>(PRODUCTS_QUERY_KEY)\ntype ProductQueryKey = typeof productKeys\n\nexport const useProducts = (\n  query?: StoreGetProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductsListRes>,\n    Error,\n    ReturnType<ProductQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productKeys.list(query),\n    () => client.products.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useProduct = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreProductsRes>,\n    Error,\n    ReturnType<ProductQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    productKeys.detail(id),\n    () => client.products.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { StoreCartsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nconst CARTS_QUERY_KEY = `carts` as const\n\nexport const cartKeys = queryKeysFactory(CARTS_QUERY_KEY)\ntype CartQueryKey = typeof cartKeys\n\nexport const useGetCart = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCartsRes>,\n    Error,\n    ReturnType<CartQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    cartKeys.detail(id),\n    () => client.carts.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCartsRes,\n  StoreCompleteCartRes,\n  StorePostCartReq,\n  StorePostCartsCartPaymentSessionReq,\n  StorePostCartsCartPaymentSessionUpdateReq,\n  StorePostCartsCartReq,\n  StorePostCartsCartShippingMethodReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\n\nexport const useCreateCart = (\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartReq | undefined\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data?: StorePostCartReq | undefined) => client.carts.create(data),\n    options\n  )\n}\n\nexport const useUpdateCart = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error, StorePostCartsCartReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartReq) => client.carts.update(cartId, data),\n    options\n  )\n}\n\nexport const useCompleteCart = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCompleteCartRes, Error>\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.carts.complete(cartId), options)\n}\n\nexport const useCreatePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error>\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.carts.createPaymentSessions(cartId), options)\n}\n\nexport const useUpdatePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    { provider_id: string } & StorePostCartsCartPaymentSessionUpdateReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ data, provider_id }) =>\n      client.carts.updatePaymentSession(cartId, provider_id, { data }),\n    options\n  )\n}\n\ntype RefreshPaymentSessionMutationData = {\n  provider_id: string\n}\n\nexport const useRefreshPaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    RefreshPaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ provider_id }: RefreshPaymentSessionMutationData) =>\n      client.carts.refreshPaymentSession(cartId, provider_id),\n    options\n  )\n}\n\ntype SetPaymentSessionMutationData = { provider_id: string }\n\nexport const useSetPaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    SetPaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartPaymentSessionReq) =>\n      client.carts.setPaymentSession(cartId, data),\n    options\n  )\n}\n\nexport const useAddShippingMethodToCart = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartShippingMethodReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartShippingMethodReq) =>\n      client.carts.addShippingMethod(cartId, data),\n    options\n  )\n}\n\ntype DeletePaymentSessionMutationData = {\n  provider_id: string\n}\n\nexport const useDeletePaymentSession = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    DeletePaymentSessionMutationData\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ provider_id }: DeletePaymentSessionMutationData) =>\n      client.carts.deletePaymentSession(cartId, provider_id),\n    options\n  )\n}\n\nexport const useStartCheckout = (\n  options?: UseMutationOptions<StoreCartsRes[\"cart\"], Error, StorePostCartReq>\n) => {\n  const { client } = useMedusa()\n  const mutation = useMutation(async (data?: StorePostCartReq) => {\n    const { cart } = await client.carts.create(data)\n    const res = await client.carts.createPaymentSessions(cart.id)\n    return res.cart\n  }, options)\n\n  return mutation\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport {\n  StoreShippingOptionsListRes,\n  StoreGetShippingOptionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nconst SHIPPING_OPTION_QUERY_KEY = `shipping_options` as const\n\nconst shippingOptionKey = {\n  ...queryKeysFactory(SHIPPING_OPTION_QUERY_KEY),\n  cart: (cartId: string) => [...shippingOptionKey.all, \"cart\", cartId] as const,\n}\n\ntype ShippingOptionQueryKey = typeof shippingOptionKey\n\nexport const useShippingOptions = (\n  query?: StoreGetShippingOptionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    shippingOptionKey.list(query),\n    async () => client.shippingOptions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCartShippingOptions = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    shippingOptionKey.cart(cartId),\n    async () => client.shippingOptions.listCartOptions(cartId),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { StoreRegionsRes, StoreRegionsListRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nconst REGIONS_QUERY_KEY = `regions` as const\n\nconst regionsKey = queryKeysFactory(REGIONS_QUERY_KEY)\n\ntype RegionQueryType = typeof regionsKey\n\nexport const useRegions = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreRegionsListRes>,\n    Error,\n    ReturnType<RegionQueryType[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    regionsKey.lists(),\n    () => client.regions.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useRegion = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreRegionsRes>,\n    Error,\n    ReturnType<RegionQueryType[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    regionsKey.detail(id),\n    () => client.regions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport {\n  StoreReturnReasonsListRes,\n  StoreReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nconst RETURNS_REASONS_QUERY_KEY = `return_reasons` as const\n\nconst returnReasonsKey = queryKeysFactory(RETURNS_REASONS_QUERY_KEY)\n\ntype ReturnReasonsQueryKey = typeof returnReasonsKey\n\nexport const useReturnReasons = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreReturnReasonsListRes>,\n    Error,\n    ReturnType<ReturnReasonsQueryKey[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    returnReasonsKey.lists(),\n    () => client.returnReasons.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useReturnReason = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreReturnReasonsRes>,\n    Error,\n    ReturnType<ReturnReasonsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    returnReasonsKey.detail(id),\n    () => client.returnReasons.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { StoreSwapsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nconst SWAPS_QUERY_KEY = `swaps` as const\n\nconst swapKey = {\n  ...queryKeysFactory(SWAPS_QUERY_KEY),\n  cart: (cartId: string) => [...swapKey.all, \"cart\", cartId] as const,\n}\n\ntype SwapQueryKey = typeof swapKey\n\nexport const useCartSwap = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreSwapsRes>,\n    Error,\n    ReturnType<SwapQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    swapKey.cart(cartId),\n    () => client.swaps.retrieveByCartId(cartId),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { StoreOrdersRes, StoreGetOrdersParams } from \"@medusajs/medusa\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nconst ORDERS_QUERY_KEY = `orders` as const\n\nexport const orderKeys = {\n  ...queryKeysFactory<typeof ORDERS_QUERY_KEY, StoreGetOrdersParams>(\n    ORDERS_QUERY_KEY\n  ),\n  cart: (cartId: string) => [...orderKeys.details(), \"cart\", cartId] as const,\n}\n\ntype OrderQueryKey = typeof orderKeys\n\nexport const useOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.detail(id),\n    () => client.orders.retrieve(id),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useCartOrder = (\n  cartId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"cart\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.cart(cartId),\n    () => client.orders.retrieveByCartId(cartId),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n\nexport const useOrders = (\n  query: StoreGetOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    orderKeys.list(query),\n    () => client.orders.lookupOrder(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCustomersListOrdersRes,\n  StoreCustomersRes,\n  StoreGetCustomersCustomerOrdersParams,\n} from \"@medusajs/medusa\"\nimport { useQuery } from \"react-query\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst CUSTOMERS_QUERY_KEY = `customers` as const\n\nexport const customerKeys = {\n  ...queryKeysFactory(CUSTOMERS_QUERY_KEY),\n  orders: (id: string) => [...customerKeys.detail(id), \"orders\"] as const,\n}\n\ntype CustomerQueryKey = typeof customerKeys\n\nexport const useMeCustomer = (\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCustomersRes>,\n    Error,\n    ReturnType<CustomerQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    customerKeys.detail(\"me\"),\n    () => client.customers.retrieve(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCustomerOrders = (\n  query: StoreGetCustomersCustomerOrdersParams = { limit: 10, offset: 0 },\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCustomersListOrdersRes>,\n    Error,\n    ReturnType<CustomerQueryKey[\"orders\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    customerKeys.orders(\"me\"),\n    () => client.customers.listOrders(query),\n    options\n  )\n\n  return { ...data, ...rest } as const\n}\n","import { queryKeysFactory } from \"../../utils/index\"\nimport { StoreGiftCardsRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\n\nconst GIFT_CARDS_QUERY_KEY = `gift_cards` as const\n\nexport const giftCardKeys = queryKeysFactory(GIFT_CARDS_QUERY_KEY)\n\ntype GiftCardQueryKey = typeof giftCardKeys\n\nexport const useGiftCard = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreGiftCardsRes>,\n    Error,\n    ReturnType<GiftCardQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    giftCardKeys.detail(id),\n    () => client.giftCards.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  StoreCollectionsListRes,\n  StoreCollectionsRes,\n  StoreGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst COLLECTIONS_QUERY_KEY = `collections` as const\n\nexport const collectionKeys = queryKeysFactory(COLLECTIONS_QUERY_KEY)\n\ntype CollectionQueryKey = typeof collectionKeys\n\nexport const useCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCollectionsRes>,\n    Error,\n    ReturnType<CollectionQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    collectionKeys.detail(id),\n    () => client.collections.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useCollections = (\n  query?: StoreGetCollectionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<StoreCollectionsListRes>,\n    Error,\n    ReturnType<CollectionQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    collectionKeys.list(query),\n    () => client.collections.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import React, { useState } from \"react\"\nimport {\n  useAddShippingMethodToCart,\n  useCompleteCart,\n  useCreateCart,\n  useSetPaymentSession,\n  useUpdateCart,\n  useCreatePaymentSession,\n} from \"../hooks/store/\"\nimport { Cart } from \"../types\"\n\ninterface CartState {\n  cart?: Cart\n}\n\ninterface CartContext extends CartState {\n  setCart: (cart: Cart) => void\n  pay: ReturnType<typeof useSetPaymentSession>\n  createCart: ReturnType<typeof useCreateCart>\n  startCheckout: ReturnType<typeof useCreatePaymentSession>\n  completeCheckout: ReturnType<typeof useCompleteCart>\n  updateCart: ReturnType<typeof useUpdateCart>\n  addShippingMethod: ReturnType<typeof useAddShippingMethodToCart>\n  totalItems: number\n}\n\nconst CartContext = React.createContext<CartContext | null>(null)\n\nexport const useCart = () => {\n  const context = React.useContext(CartContext)\n  if (!context) {\n    throw new Error(\"useCart must be used within a CartProvider\")\n  }\n  return context\n}\n\ninterface CartProps {\n  children: React.ReactNode\n  initialState?: Cart\n}\n\nconst defaultInitialState = {\n  id: \"\",\n  items: [] as any,\n} as Cart\n\nexport const CartProvider = ({\n  children,\n  initialState = defaultInitialState,\n}: CartProps) => {\n  const [cart, setCart] = useState<Cart>(initialState)\n\n  const createCart = useCreateCart({\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const updateCart = useUpdateCart(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const addShippingMethod = useAddShippingMethodToCart(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const startCheckout = useCreatePaymentSession(cart?.id, {\n    onSuccess: ({ cart }) => setCart(cart),\n  })\n\n  const pay = useSetPaymentSession(cart?.id, {\n    onSuccess: ({ cart }) => {\n      setCart(cart)\n    },\n  })\n\n  const completeCheckout = useCompleteCart(cart?.id)\n\n  const totalItems = cart?.items\n    .map(i => i.quantity)\n    .reduce((acc, curr) => acc + curr, 0)\n\n  return (\n    <CartContext.Provider\n      value={{\n        cart,\n        setCart,\n        createCart,\n        pay,\n        startCheckout,\n        completeCheckout,\n        updateCart,\n        addShippingMethod,\n        totalItems: totalItems || 0,\n      }}\n    >\n      {children}\n    </CartContext.Provider>\n  )\n}\n","import { AdminAuthRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_AUTH_QUERY_KEY = `admin_auth` as const\n\nexport const adminAuthKeys = queryKeysFactory(ADMIN_AUTH_QUERY_KEY)\n\ntype AuthQueryKey = typeof adminAuthKeys\n\nexport const useAdminGetSession = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminAuthRes>,\n    Error,\n    ReturnType<AuthQueryKey[\"details\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminAuthKeys.details(),\n    () => client.admin.auth.getSession(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { QueryClient, QueryKey, UseMutationOptions } from \"react-query\"\n\nexport const buildOptions = <\n  TData,\n  TError,\n  TVariables,\n  TContext,\n  TKey extends Array<QueryKey>\n>(\n  queryClient: QueryClient,\n  queryKey?: TKey[] | TKey,\n  options?: UseMutationOptions<TData, TError, TVariables, TContext>\n): UseMutationOptions<TData, TError, TVariables, TContext> => {\n  return {\n    ...options,\n    onSuccess: (...args) => {\n      if (options?.onSuccess) {\n        return options.onSuccess(...args)\n      }\n\n      if (queryKey !== undefined) {\n        if (queryKey.filter(Array.isArray).length > 0) {\n          queryKey.forEach(key => queryClient.invalidateQueries(key))\n        } else {\n          queryClient.invalidateQueries(queryKey)\n        }\n      }\n    },\n  }\n}\n","import {\n  AdminBatchJobListRes,\n  AdminBatchJobRes,\n  AdminGetBatchParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_batches` as const\n\nexport const adminBatchJobsKeys = queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY)\n\ntype BatchJobsQueryKey = typeof adminBatchJobsKeys\n\nexport const useAdminBatchJobs = (\n  query?: AdminGetBatchParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminBatchJobListRes>,\n    Error,\n    ReturnType<BatchJobsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminBatchJobsKeys.list(query),\n    () => client.admin.batchJobs.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminBatchJob = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminBatchJobRes>,\n    Error,\n    ReturnType<BatchJobsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminBatchJobsKeys.detail(id),\n    () => client.admin.batchJobs.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminOrdersListRes,\n  AdminOrdersRes,\n  AdminGetOrdersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_ORDERS_QUERY_KEY = `admin_orders` as const\n\nexport const adminOrderKeys = queryKeysFactory(ADMIN_ORDERS_QUERY_KEY)\n\ntype OrderQueryKeys = typeof adminOrderKeys\n\nexport const useAdminOrders = (\n  query?: AdminGetOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrdersListRes>,\n    Error,\n    ReturnType<OrderQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderKeys.list(query),\n    () => client.admin.orders.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminOrdersRes>,\n    Error,\n    ReturnType<OrderQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminOrderKeys.detail(id),\n    () => client.admin.orders.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCollectionsListRes,\n  AdminCollectionsRes,\n  AdminGetCollectionsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_collections` as const\n\nexport const adminCollectionKeys = queryKeysFactory(ADMIN_COLLECTIONS_QUERY_KEY)\n\ntype CollectionsQueryKey = typeof adminCollectionKeys\n\nexport const useAdminCollections = (\n  query?: AdminGetCollectionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCollectionsListRes>,\n    Error,\n    ReturnType<CollectionsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCollectionKeys.list(query),\n    () => client.admin.collections.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminCollection = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCollectionsRes>,\n    Error,\n    ReturnType<CollectionsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCollectionKeys.detail(id),\n    () => client.admin.collections.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCurrenciesListRes,\n  AdminGetCurrenciesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_CURRENCIES_QUERY_KEY = `admin_currencies` as const\n\nexport const adminCurrenciesKeys = queryKeysFactory(ADMIN_CURRENCIES_QUERY_KEY)\n\ntype CurrenciesQueryKey = typeof adminCurrenciesKeys\n\nexport const useAdminCurrencies = (\n  query?: AdminGetCurrenciesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCurrenciesListRes>,\n    Error,\n    ReturnType<CurrenciesQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCurrenciesKeys.list(query),\n    () => client.admin.currencies.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCustomerGroupsListRes,\n  AdminCustomerGroupsRes,\n  AdminCustomersListRes,\n  AdminGetCustomerGroupsGroupParams,\n  AdminGetCustomerGroupsParams,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_CUSTOMER_GROUPS_QUERY_KEY = `admin_customer_groups` as const\n\nexport const adminCustomerGroupKeys = {\n  ...queryKeysFactory(ADMIN_CUSTOMER_GROUPS_QUERY_KEY),\n  detailCustomer(id: string, query?: AdminGetCustomersParams) {\n    return [...this.detail(id), \"customers\", { ...(query || {}) }]\n  },\n}\n\ntype CustomerGroupQueryKeys = typeof adminCustomerGroupKeys\n\n/**\n * Hook retrieves a customer group by id.\n *\n * @param id - customer group id\n * @param query - query params\n * @param options\n */\nexport const useAdminCustomerGroup = (\n  id: string,\n  query?: AdminGetCustomerGroupsGroupParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.detail(id),\n    () => client.admin.customerGroups.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * Hook retrieves a list of customer groups.\n *\n * @param query - pagination/filtering params\n * @param options\n */\nexport const useAdminCustomerGroups = (\n  query?: AdminGetCustomerGroupsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomerGroupsListRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.list(query),\n    () => client.admin.customerGroups.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * Hook retrieves a list of customers that belong to provided groups.\n *\n * @param id - customer group id\n * @param query - pagination/filtering params\n * @param options\n */\nexport const useAdminCustomerGroupCustomers = (\n  id: string,\n  query?: AdminGetCustomersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersListRes>,\n    Error,\n    ReturnType<CustomerGroupQueryKeys[\"detailCustomer\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerGroupKeys.detailCustomer(id, query),\n    () => client.admin.customerGroups.listCustomers(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminCustomersListRes,\n  AdminCustomersRes,\n  AdminGetCustomersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_CUSTOMERS_QUERY_KEY = `admin_customers` as const\n\nexport const adminCustomerKeys = queryKeysFactory(ADMIN_CUSTOMERS_QUERY_KEY)\n\ntype CustomerQueryKeys = typeof adminCustomerKeys\n\nexport const useAdminCustomers = (\n  query?: AdminGetCustomersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersListRes>,\n    Error,\n    ReturnType<CustomerQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerKeys.list(query),\n    () => client.admin.customers.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminCustomer = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminCustomersRes>,\n    Error,\n    ReturnType<CustomerQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminCustomerKeys.detail(id),\n    () => client.admin.customers.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDiscountConditionsRes,\n  AdminDiscountsListRes,\n  AdminDiscountsRes,\n  AdminGetDiscountParams,\n  AdminGetDiscountsDiscountConditionsConditionParams,\n  AdminGetDiscountsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_DISCOUNTS_QUERY_KEY = `admin_discounts` as const\n\nexport const adminDiscountKeys = {\n  ...queryKeysFactory(ADMIN_DISCOUNTS_QUERY_KEY),\n  detailCondition(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"condition\" as const,\n      { ...(query || {}) },\n    ] as const\n  },\n}\n\ntype DiscountQueryKeys = typeof adminDiscountKeys\n\nexport const useAdminDiscounts = (\n  query?: AdminGetDiscountsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsListRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.list(query),\n    () => client.admin.discounts.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminDiscount = (\n  id: string,\n  query?: AdminGetDiscountParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detail(id),\n    () => client.admin.discounts.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGetDiscountByCode = (\n  code: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detail(code),\n    () => client.admin.discounts.retrieveByCode(code),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGetDiscountCondition = (\n  id: string,\n  conditionId: string,\n  query?: AdminGetDiscountsDiscountConditionsConditionParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDiscountConditionsRes>,\n    Error,\n    ReturnType<DiscountQueryKeys[\"detailCondition\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDiscountKeys.detailCondition(conditionId),\n    () => client.admin.discounts.getCondition(id, conditionId, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminDraftOrdersListRes,\n  AdminDraftOrdersRes,\n  AdminGetDraftOrdersParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_DRAFT_ORDERS_QUERY_KEY = `admin_draft_orders` as const\n\nexport const adminDraftOrderKeys = queryKeysFactory(\n  ADMIN_DRAFT_ORDERS_QUERY_KEY\n)\n\ntype DraftOrderQueryKeys = typeof adminDraftOrderKeys\n\nexport const useAdminDraftOrders = (\n  query?: AdminGetDraftOrdersParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDraftOrdersListRes>,\n    Error,\n    ReturnType<DraftOrderQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDraftOrderKeys.list(query),\n    () => client.admin.draftOrders.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminDraftOrder = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    ReturnType<DraftOrderQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminDraftOrderKeys.detail(id),\n    () => client.admin.draftOrders.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGiftCardsListRes,\n  AdminGiftCardsRes,\n  AdminGetGiftCardsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_GIFT_CARDS_QUERY_KEY = `admin_gift_cards` as const\n\nexport const adminGiftCardKeys = queryKeysFactory(ADMIN_GIFT_CARDS_QUERY_KEY)\n\ntype GiftCardQueryKeys = typeof adminGiftCardKeys\n\nexport const useAdminGiftCards = (\n  query?: AdminGetGiftCardsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGiftCardsListRes>,\n    Error,\n    ReturnType<GiftCardQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminGiftCardKeys.list(query),\n    () => client.admin.giftCards.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminGiftCard = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGiftCardsRes>,\n    Error,\n    ReturnType<GiftCardQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminGiftCardKeys.detail(id),\n    () => client.admin.giftCards.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminListInvitesRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_INVITES_QUERY_KEY = `admin_invites` as const\n\nexport const adminInviteKeys = queryKeysFactory(ADMIN_INVITES_QUERY_KEY)\n\ntype InviteQueryKeys = typeof adminInviteKeys\n\nexport const useAdminInvites = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminListInvitesRes>,\n    Error,\n    ReturnType<InviteQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminInviteKeys.lists(),\n    () => client.admin.invites.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminNotesListRes,\n  AdminNotesRes,\n  AdminGetNotesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_NOTE_QUERY_KEY = `admin_notes` as const\n\nexport const adminNoteKeys = queryKeysFactory(ADMIN_NOTE_QUERY_KEY)\n\ntype NoteQueryKeys = typeof adminNoteKeys\n\nexport const useAdminNotes = (\n  query?: AdminGetNotesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotesListRes>,\n    Error,\n    ReturnType<NoteQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNoteKeys.list(query),\n    () => client.admin.notes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminNote = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotesRes>,\n    Error,\n    ReturnType<NoteQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNoteKeys.detail(id),\n    () => client.admin.notes.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGetNotificationsParams,\n  AdminNotificationsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_NOTIFICATIONS_QUERY_KEY = `admin_notifications` as const\n\nexport const adminNotificationKeys = queryKeysFactory(\n  ADMIN_NOTIFICATIONS_QUERY_KEY\n)\n\ntype NotificationQueryKeys = typeof adminNotificationKeys\n\nexport const useAdminNotifications = (\n  query?: AdminGetNotificationsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminNotificationsListRes>,\n    Error,\n    ReturnType<NotificationQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminNotificationKeys.list(query),\n    () => client.admin.notifications.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGetPriceListsPriceListProductsParams,\n  AdminGetPriceListPaginationParams,\n  AdminPriceListsListRes,\n  AdminPriceListRes,\n  AdminProductsListRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRICE_LISTS_QUERY_KEY = `admin_price_lists` as const\n\nexport const adminPriceListKeys = {\n  ...queryKeysFactory(ADMIN_PRICE_LISTS_QUERY_KEY),\n  detailProducts(id: string, query?: any) {\n    return [\n      ...this.detail(id),\n      \"products\" as const,\n      { ...(query || {}) },\n    ] as const\n  }\n}\n\ntype PriceListQueryKeys = typeof adminPriceListKeys\n\nexport const useAdminPriceLists = (\n  query?: AdminGetPriceListPaginationParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPriceListsListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.list(query),\n    () => client.admin.priceLists.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPriceListProducts = (\n  id: string,\n  query?: AdminGetPriceListsPriceListProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"detailProducts\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.detailProducts(id, query),\n    () => client.admin.priceLists.listProducts(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminPriceList = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPriceListRes>,\n    Error,\n    ReturnType<PriceListQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminPriceListKeys.detail(id),\n    () => client.admin.priceLists.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminProductsListRes,\n  AdminProductsRes,\n  AdminGetProductsParams,\n  AdminProductsListTagsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCTS_QUERY_KEY = `admin_products` as const\n\nexport const adminProductKeys = queryKeysFactory(ADMIN_PRODUCTS_QUERY_KEY)\n\ntype ProductQueryKeys = typeof adminProductKeys\n\nexport const useAdminProducts = (\n  query?: AdminGetProductsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.list(query),\n    () => client.admin.products.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProduct = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.detail(id),\n    () => client.admin.products.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminProductTagUsage = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductsListTagsRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductKeys.detail(\"tags\"),\n    () => client.admin.products.listTags(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminVariantsListRes, AdminGetVariantsParams } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_VARIANT_QUERY_KEY = `admin_variants` as const\n\nexport const adminVariantKeys = queryKeysFactory(ADMIN_VARIANT_QUERY_KEY)\n\ntype VariantQueryKeys = typeof adminVariantKeys\n\nexport const useAdminVariants = (\n  query?: AdminGetVariantsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminVariantsListRes>,\n    Error,\n    ReturnType<VariantQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminVariantKeys.list(query),\n    () => client.admin.variants.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminProductTagsListRes,\n  AdminGetProductTagsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCT_TAGS_QUERY_KEY = `admin_product_tags` as const\n\nexport const adminProductTagKeys = queryKeysFactory(\n  ADMIN_PRODUCT_TAGS_QUERY_KEY\n)\n\ntype ProductQueryKeys = typeof adminProductTagKeys\n\nexport const useAdminProductTags = (\n  query?: AdminGetProductTagsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductTagsListRes>,\n    Error,\n    ReturnType<ProductQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductTagKeys.list(query),\n    () => client.admin.productTags.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminProductTypesListRes,\n  AdminGetProductTypesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_PRODUCT_TYPES_QUERY_KEY = `admin_product_types` as const\n\nexport const adminProductTypeKeys = queryKeysFactory(\n  ADMIN_PRODUCT_TYPES_QUERY_KEY\n)\n\ntype ProductTypesQueryKeys = typeof adminProductTypeKeys\n\nexport const useAdminProductTypes = (\n  query?: AdminGetProductTypesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminProductTypesListRes>,\n    Error,\n    ReturnType<ProductTypesQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminProductTypeKeys.list(query),\n    () => client.admin.productTypes.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminRegionsListRes,\n  AdminRegionsRes,\n  AdminGetRegionsParams,\n  AdminGetRegionsRegionFulfillmentOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_REGIONS_QUERY_KEY = `admin_regions` as const\n\nexport const adminRegionKeys = queryKeysFactory(ADMIN_REGIONS_QUERY_KEY)\n\ntype RegionQueryKeys = typeof adminRegionKeys\n\nexport const useAdminRegions = (\n  query?: AdminGetRegionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminRegionsListRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.list(query),\n    () => client.admin.regions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminRegion = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminRegionsRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.detail(id),\n    () => client.admin.regions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminRegionFulfillmentOptions = (\n  regionId: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminGetRegionsRegionFulfillmentOptionsRes>,\n    Error,\n    ReturnType<RegionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminRegionKeys.detail(`${regionId}_fullfillment-options`),\n    () => client.admin.regions.retrieveFulfillmentOptions(regionId),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminReturnReasonsListRes,\n  AdminReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_RETURNS_REASONS_QUERY_KEY = `admin_return_reasons` as const\n\nexport const adminReturnReasonKeys = queryKeysFactory(\n  ADMIN_RETURNS_REASONS_QUERY_KEY\n)\n\ntype ReturnReasonQueryKeys = typeof adminReturnReasonKeys\n\nexport const useAdminReturnReasons = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnReasonsListRes>,\n    Error,\n    ReturnType<ReturnReasonQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnReasonKeys.lists(),\n    () => client.admin.returnReasons.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminReturnReason = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    ReturnType<ReturnReasonQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnReasonKeys.detail(id),\n    () => client.admin.returnReasons.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminReturnsListRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_RETURNS_QUERY_KEY = `admin_returns` as const\n\nexport const adminReturnKeys = queryKeysFactory(ADMIN_RETURNS_QUERY_KEY)\n\ntype ReturnQueryKeys = typeof adminReturnKeys\n\nexport const useAdminReturns = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminReturnsListRes>,\n    Error,\n    ReturnType<ReturnQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminReturnKeys.lists(),\n    () => client.admin.returns.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminSalesChannelsRes,\n  AdminSalesChannelsListRes,\n  AdminGetSalesChannelsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils\"\n\nconst ADMIN_SALES_CHANNELS_QUERY_KEY = `admin_sales_channels` as const\n\nexport const adminSalesChannelsKeys = queryKeysFactory(\n  ADMIN_SALES_CHANNELS_QUERY_KEY\n)\n\ntype SalesChannelsQueryKeys = typeof adminSalesChannelsKeys\n\n/** retrieve a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description gets a sales channel\n * @returns a medusa sales channel\n */\nexport const useAdminSalesChannel = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    ReturnType<SalesChannelsQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSalesChannelsKeys.detail(id),\n    () => client.admin.salesChannels.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\n/**\n * retrieve a list of sales channels\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description Retrieve a list of sales channel\n * @returns a list of sales channel as well as the pagination properties\n */\nexport const useAdminSalesChannels = (\n  query?: AdminGetSalesChannelsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSalesChannelsListRes>,\n    Error,\n    ReturnType<SalesChannelsQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSalesChannelsKeys.list(query),\n    () => client.admin.salesChannels.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminGetShippingOptionsParams,\n  AdminShippingOptionsListRes,\n  AdminShippingOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_SHIPPING_OPTIONS_QUERY_KEY = `admin_shipping_options` as const\n\nexport const adminShippingOptionKeys = queryKeysFactory(\n  ADMIN_SHIPPING_OPTIONS_QUERY_KEY\n)\n\ntype ShippingOptionQueryKeys = typeof adminShippingOptionKeys\n\nexport const useAdminShippingOptions = (\n  query?: AdminGetShippingOptionsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingOptionsListRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingOptionKeys.list(query),\n    () => client.admin.shippingOptions.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminShippingOption = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    ReturnType<ShippingOptionQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingOptionKeys.detail(id),\n    () => client.admin.shippingOptions.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminShippingProfilesListRes,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_COLLECTIONS_QUERY_KEY = `admin_shippingProfiles` as const\n\nexport const adminShippingProfileKeys = queryKeysFactory(\n  ADMIN_COLLECTIONS_QUERY_KEY\n)\n\ntype ShippingProfileQueryKeys = typeof adminShippingProfileKeys\n\nexport const useAdminShippingProfiles = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingProfilesListRes>,\n    Error,\n    ReturnType<ShippingProfileQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingProfileKeys.lists(),\n    () => client.admin.shippingProfiles.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminShippingProfile = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    ReturnType<ShippingProfileQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminShippingProfileKeys.detail(id),\n    () => client.admin.shippingProfiles.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminTaxProvidersList,\n  AdminPaymentProvidersList,\n  AdminStoresRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_STORE_QUERY_KEY = `admin_store` as const\n\nexport const adminStoreKeys = queryKeysFactory(ADMIN_STORE_QUERY_KEY)\n\ntype StoreQueryKeys = typeof adminStoreKeys\n\nexport const useAdminStorePaymentProviders = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminPaymentProvidersList>,\n    Error,\n    ReturnType<StoreQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.detail(\"payment_providers\"),\n    () => client.admin.store.listPaymentProviders(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStoreTaxProviders = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxProvidersList>,\n    Error,\n    ReturnType<StoreQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.detail(\"tax_providers\"),\n    () => client.admin.store.listTaxProviders(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminStore = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminStoresRes>,\n    Error,\n    ReturnType<StoreQueryKeys[\"details\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminStoreKeys.details(),\n    () => client.admin.store.retrieve(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminSwapsListRes,\n  AdminSwapsRes,\n  AdminGetSwapsParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_SWAPS_QUERY_KEY = `admin_swaps` as const\n\nexport const adminSwapKeys = queryKeysFactory(ADMIN_SWAPS_QUERY_KEY)\n\ntype SwapsQueryKey = typeof adminSwapKeys\n\nexport const useAdminSwaps = (\n  query?: AdminGetSwapsParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSwapsListRes>,\n    Error,\n    ReturnType<SwapsQueryKey[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSwapKeys.list(query),\n    () => client.admin.swaps.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminSwap = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminSwapsRes>,\n    Error,\n    ReturnType<SwapsQueryKey[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminSwapKeys.detail(id),\n    () => client.admin.swaps.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import {\n  AdminTaxRatesRes,\n  AdminTaxRatesListRes,\n  AdminGetTaxRatesParams,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_TAX_RATES_QUERY_KEY = `admin_tax_rates` as const\n\nexport const adminTaxRateKeys = queryKeysFactory(ADMIN_TAX_RATES_QUERY_KEY)\n\ntype TaxRateQueryKeys = typeof adminTaxRateKeys\n\nexport const useAdminTaxRates = (\n  query?: AdminGetTaxRatesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxRatesListRes>,\n    Error,\n    ReturnType<TaxRateQueryKeys[\"list\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminTaxRateKeys.list(query),\n    () => client.admin.taxRates.list(query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminTaxRate = (\n  id: string,\n  query?: AdminGetTaxRatesParams,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminTaxRatesRes>,\n    Error,\n    ReturnType<TaxRateQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminTaxRateKeys.detail(id),\n    () => client.admin.taxRates.retrieve(id, query),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import { AdminUsersListRes, AdminUserRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useQuery } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { UseQueryOptionsWrapper } from \"../../../types\"\nimport { queryKeysFactory } from \"../../utils/index\"\n\nconst ADMIN_USERS_QUERY_KEY = `admin_users` as const\n\nexport const adminUserKeys = queryKeysFactory(ADMIN_USERS_QUERY_KEY)\n\ntype UserQueryKeys = typeof adminUserKeys\n\nexport const useAdminUsers = (\n  options?: UseQueryOptionsWrapper<\n    Response<AdminUsersListRes>,\n    Error,\n    ReturnType<UserQueryKeys[\"lists\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminUserKeys.lists(),\n    () => client.admin.users.list(),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n\nexport const useAdminUser = (\n  id: string,\n  options?: UseQueryOptionsWrapper<\n    Response<AdminUserRes>,\n    Error,\n    ReturnType<UserQueryKeys[\"detail\"]>\n  >\n) => {\n  const { client } = useMedusa()\n  const { data, ...rest } = useQuery(\n    adminUserKeys.detail(id),\n    () => client.admin.users.retrieve(id),\n    options\n  )\n  return { ...data, ...rest } as const\n}\n","import * as React from \"react\"\n\nexport const useLocalStorage = (key: string, initialState: string) => {\n  const [item, setItem] = React.useState(() => {\n    try {\n      const item =\n        typeof window !== \"undefined\" && window.localStorage.getItem(key)\n\n      return item || initialState\n    } catch (err) {\n      return initialState\n    }\n  })\n\n  const save = (data: string) => {\n    setItem(data)\n\n    if (typeof window !== \"undefined\") {\n      window.localStorage.setItem(key, data)\n    }\n  }\n\n  const remove = () => {\n    if (typeof window !== \"undefined\") {\n      window.localStorage.removeItem(key)\n    }\n  }\n\n  return [item, save, remove] as const\n}\n","import { buildOptions } from \"../../utils/buildOptions\"\nimport {\n  AdminInviteDeleteRes,\n  AdminPostInvitesInviteAcceptReq,\n} from \"@medusajs/medusa\"\nimport { Response, AdminPostInvitesPayload } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { adminInviteKeys } from \"./queries\"\n\nexport const useAdminAcceptInvite = (\n  options?: UseMutationOptions<\n    Response<void>,\n    Error,\n    AdminPostInvitesInviteAcceptReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInvitesInviteAcceptReq) =>\n      client.admin.invites.accept(payload),\n    buildOptions(queryClient, adminInviteKeys.lists(), options)\n  )\n}\n\nexport const useAdminResendInvite = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  return useMutation(() => client.admin.invites.resend(id), options)\n}\n\nexport const useAdminCreateInvite = (\n  options?: UseMutationOptions<Response<void>, Error, AdminPostInvitesPayload>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostInvitesPayload) => client.admin.invites.create(payload),\n    buildOptions(queryClient, adminInviteKeys.lists(), options)\n  )\n}\n\nexport const useAdminDeleteInvite = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminInviteDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.invites.delete(id),\n    buildOptions(\n      queryClient,\n      [adminInviteKeys.lists(), adminInviteKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminCustomerGroupsDeleteRes,\n  AdminCustomerGroupsRes,\n  AdminDeleteCustomerGroupsGroupCustomerBatchReq,\n  AdminPostCustomerGroupsGroupCustomersBatchReq,\n  AdminPostCustomerGroupsGroupReq,\n  AdminPostCustomerGroupsReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCustomerGroupKeys } from \"./queries\"\n\n/**\n * Hook returns functions for creating customer groups.\n *\n * @param options\n */\nexport const useAdminCreateCustomerGroup = (\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsReq) =>\n      client.admin.customerGroups.create(payload),\n    buildOptions(queryClient, adminCustomerGroupKeys.lists(), options)\n  )\n}\n\n/**\n * Hook return functions for updating a customer group.\n *\n * @param id - id of the customer group that is being updated\n * @param options\n */\nexport const useAdminUpdateCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsGroupReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsGroupReq) =>\n      client.admin.customerGroups.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook return functions for deleting a customer group.\n *\n * @param id - id of the customer group that is being deleted\n * @param options\n */\nexport const useAdminDeleteCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.customerGroups.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCustomerGroupKeys.lists(), adminCustomerGroupKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns functions for addition of multiple customers to a customer group.\n *\n * @param id - id of the customer group in which customers are being added\n * @param options\n */\nexport const useAdminAddCustomersToCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminPostCustomerGroupsGroupCustomersBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomerGroupsGroupCustomersBatchReq) =>\n      client.admin.customerGroups.addCustomers(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminCustomerGroupKeys.lists(),\n        adminCustomerGroupKeys.detailCustomer(id),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for removal of multiple customers from a customer group.\n *\n * @param id - id of a group from which customers will be removed\n * @param options\n */\nexport const useAdminRemoveCustomersFromCustomerGroup = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomerGroupsRes>,\n    Error,\n    AdminDeleteCustomerGroupsGroupCustomerBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteCustomerGroupsGroupCustomerBatchReq) =>\n      client.admin.customerGroups.removeCustomers(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminCustomerGroupKeys.lists(),\n        adminCustomerGroupKeys.detailCustomer(id),\n      ],\n      options\n    )\n  )\n}\n","import {\n  AdminCollectionsDeleteRes,\n  AdminCollectionsRes,\n  AdminDeleteProductsFromCollectionReq,\n  AdminPostCollectionsCollectionReq,\n  AdminPostCollectionsReq,\n  AdminPostProductsToCollectionReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminCollectionKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateCollection = (\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostCollectionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCollectionsReq) =>\n      client.admin.collections.create(payload),\n    buildOptions(queryClient, adminCollectionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostCollectionsCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCollectionsCollectionReq) =>\n      client.admin.collections.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteCollection = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminCollectionsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.collections.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\n\n/**\n * Hook returns function for adding multiple products to a collection.\n *\n * @param id - id of the collection in which products are being added\n * @param options\n */\nexport const useAdminAddProductsToCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsRes>,\n    Error,\n    AdminPostProductsToCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsToCollectionReq) =>\n      client.admin.collections.addProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook returns function for removal of multiple products from a collection.\n *\n * @param id - id of the collection from which products will be removed\n * @param options\n */\nexport const useAdminRemoveProductsFromCollection = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCollectionsDeleteRes>,\n    Error,\n    AdminDeleteProductsFromCollectionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteProductsFromCollectionReq) =>\n      client.admin.collections.removeProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCollectionKeys.lists(), adminCollectionKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminPostSalesChannelsReq,\n  AdminSalesChannelsRes,\n  AdminPostSalesChannelsSalesChannelReq,\n  AdminSalesChannelsDeleteRes,\n  AdminDeleteSalesChannelsChannelProductsBatchReq,\n  AdminPostSalesChannelsChannelProductsBatchReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminProductKeys } from \"../products\"\nimport { adminSalesChannelsKeys } from \"./queries\"\n\n/**\n * Hook provides a mutation function for creating sales channel.\n *\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable the corresponding feature flag in your medusa backend project.\n */\nexport const useAdminCreateSalesChannel = (\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostSalesChannelsReq) =>\n      client.admin.salesChannels.create(payload),\n    buildOptions(queryClient, [adminSalesChannelsKeys.list()], options)\n  )\n}\n\n/** update a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable feature flag `sales_channels` in your medusa backend project.\n * @description updates a sales channel\n * @returns the updated medusa sales channel\n */\nexport const useAdminUpdateSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsSalesChannelReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostSalesChannelsSalesChannelReq) =>\n      client.admin.salesChannels.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Delete a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @param id\n * @param options\n */\nexport const useAdminDeleteSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsDeleteRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.salesChannels.delete(id),\n    buildOptions(\n      queryClient,\n      [adminSalesChannelsKeys.lists(), adminSalesChannelsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Remove products from a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @description remove products from a sales channel\n * @param id\n * @param options\n */\nexport const useAdminDeleteProductsFromSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminDeleteSalesChannelsChannelProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminDeleteSalesChannelsChannelProductsBatchReq) => {\n      return client.admin.salesChannels.removeProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminSalesChannelsKeys.lists(),\n        adminSalesChannelsKeys.detail(id),\n        adminProductKeys.list({ sales_channel_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n\n/**\n * Add products to a sales channel\n * @experimental This feature is under development and may change in the future.\n * To use this feature please enable featureflag `sales_channels` in your medusa backend project.\n * @description Add products to a sales channel\n * @param id\n * @param options\n */\nexport const useAdminAddProductsToSalesChannel = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminSalesChannelsRes>,\n    Error,\n    AdminPostSalesChannelsChannelProductsBatchReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostSalesChannelsChannelProductsBatchReq) => {\n      return client.admin.salesChannels.addProducts(id, payload)\n    },\n    buildOptions(\n      queryClient,\n      [\n        adminSalesChannelsKeys.lists(),\n        adminSalesChannelsKeys.detail(id),\n        adminProductKeys.list({ sales_channel_id: [id] }),\n      ],\n      options\n    )\n  )\n}\n","import { adminOrderKeys } from \"./queries\"\nimport {\n  AdminOrdersRes,\n  AdminPostOrdersOrderFulfillmentsReq,\n  AdminPostOrdersOrderRefundsReq,\n  AdminPostOrdersOrderReq,\n  AdminPostOrdersOrderReturnsReq,\n  AdminPostOrdersOrderShipmentReq,\n  AdminPostOrdersOrderShippingMethodsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminUpdateOrder = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderReq) =>\n      client.admin.orders.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCompleteOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.complete(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCapturePayment = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.capturePayment(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRefundPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderRefundsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderRefundsReq) =>\n      client.admin.orders.refundPayment(id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderFulfillmentsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderFulfillmentsReq) =>\n      client.admin.orders.createFulfillment(orderId, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(orderId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (fulfillmentId: string) =>\n      client.admin.orders.cancelFulfillment(orderId, fulfillmentId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(orderId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderShipmentReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderShipmentReq) =>\n      client.admin.orders.createShipment(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminRequestReturn = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderReturnsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderReturnsReq) =>\n      client.admin.orders.requestReturn(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminAddShippingMethod = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderShippingMethodsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderShippingMethodsReq) =>\n      client.admin.orders.addShippingMethod(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminArchiveOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.orders.archive(id),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.lists(), adminOrderKeys.detail(id)],\n      options\n    )\n  )\n}\n","import { adminStoreKeys } from \"./queries\"\nimport { AdminPostStoreReq, AdminStoresRes } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminUpdateStore = (\n  options?: UseMutationOptions<\n    Response<AdminStoresRes>,\n    Error,\n    AdminPostStoreReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostStoreReq) => client.admin.store.update(payload),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n\nexport const useAdminAddStoreCurrency = (\n  options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (currency_code: string) => client.admin.store.deleteCurrency(currency_code),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n\nexport const useAdminDeleteStoreCurrency = (\n  options?: UseMutationOptions<Response<AdminStoresRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (currency_code: string) => client.admin.store.deleteCurrency(currency_code),\n    buildOptions(queryClient, adminStoreKeys.details(), options)\n  )\n}\n","import { AdminBatchJobRes, AdminPostBatchesReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminBatchJobsKeys } from \"./queries\"\n\n/**\n * Hook returns functions for creating batch jobs.\n *\n * @param options\n */\nexport const useAdminCreateBatchJob = (\n  options?: UseMutationOptions<\n    Response<AdminBatchJobRes>,\n    Error,\n    AdminPostBatchesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostBatchesReq) => client.admin.batchJobs.create(payload),\n    buildOptions(queryClient, adminBatchJobsKeys.lists(), options)\n  )\n}\n\n/**\n * Hook return functions for canceling a batch job\n *\n * @param id - id of the batch job\n * @param options\n */\nexport const useAdminCancelBatchJob = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.batchJobs.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)],\n      options\n    )\n  )\n}\n\n/**\n * Hook return functions for confirming a batch job\n *\n * @param id - id of the batch job\n * @param options\n */\nexport const useAdminConfirmBatchJob = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminBatchJobRes>, Error>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.batchJobs.confirm(id),\n    buildOptions(\n      queryClient,\n      [adminBatchJobsKeys.lists(), adminBatchJobsKeys.detail(id)],\n      options\n    )\n  )\n}\n","import { adminOrderKeys } from \"./../orders/queries\"\nimport {\n  AdminOrdersRes,\n  AdminPostOrdersOrderClaimsClaimFulfillmentsReq,\n  AdminPostOrdersOrderClaimsClaimReq,\n  AdminPostOrdersOrderClaimsClaimShipmentsReq,\n  AdminPostOrdersOrderClaimsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostOrdersOrderClaimsReq) =>\n      client.admin.orders.createClaim(orderId, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminUpdateClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimReq & { claim_id: string }) =>\n      client.admin.orders.updateClaim(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCancelClaim = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (claimId: string) => client.admin.orders.cancelClaim(orderId, claimId),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminFulfillClaim = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimFulfillmentsReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimFulfillmentsReq & { claim_id: string }) =>\n      client.admin.orders.fulfillClaim(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCancelClaimFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    { claim_id: string; fulfillment_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      fulfillment_id,\n    }: {\n      claim_id: string\n      fulfillment_id: string\n    }) =>\n      client.admin.orders.cancelClaimFulfillment(\n        orderId,\n        claim_id,\n        fulfillment_id\n      ),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminCreateClaimShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderClaimsClaimShipmentsReq & { claim_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      claim_id,\n      ...payload\n    }: AdminPostOrdersOrderClaimsClaimShipmentsReq & { claim_id: string }) =>\n      client.admin.orders.createClaimShipment(orderId, claim_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n","import {\n  AdminPostReturnsReturnReceiveReq,\n  AdminReturnsCancelRes,\n  AdminReturnsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminReturnKeys } from \"./queries\"\n\nexport const useAdminReceiveReturn = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReturnsRes>,\n    Error,\n    AdminPostReturnsReturnReceiveReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    payload => client.admin.returns.receive(id, payload),\n    buildOptions(\n      queryClient,\n      [adminReturnKeys.detail(id), adminReturnKeys.list()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelReturn = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminReturnsCancelRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.returns.cancel(id),\n    buildOptions(\n      queryClient,\n      [adminReturnKeys.detail(id), adminReturnKeys.list()],\n      options\n    )\n  )\n}\n","import {\n  AdminOrdersRes,\n  AdminPostOrdersOrderSwapsReq,\n  AdminPostOrdersOrderSwapsSwapFulfillmentsReq,\n  AdminPostOrdersOrderSwapsSwapShipmentsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminOrderKeys } from \"..\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminSwapKeys } from \"./queries\"\n\nexport const useAdminCreateSwap = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostOrdersOrderSwapsReq) =>\n      client.admin.orders.createSwap(orderId, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelSwap = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (swapId: string) => client.admin.orders.cancelSwap(orderId, swapId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminFulfillSwap = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsSwapFulfillmentsReq & { swap_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      ...payload\n    }: AdminPostOrdersOrderSwapsSwapFulfillmentsReq & { swap_id: string }) =>\n      client.admin.orders.fulfillSwap(orderId, swap_id, payload),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateSwapShipment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    AdminPostOrdersOrderSwapsSwapShipmentsReq & { swap_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      ...payload\n    }: AdminPostOrdersOrderSwapsSwapShipmentsReq & { swap_id: string }) =>\n      client.admin.orders.createSwapShipment(orderId, swap_id, payload),\n    buildOptions(queryClient, adminOrderKeys.detail(orderId), options)\n  )\n}\n\nexport const useAdminProcessSwapPayment = (\n  orderId: string,\n  options?: UseMutationOptions<Response<AdminOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (swapId: string) => client.admin.orders.processSwapPayment(orderId, swapId),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCancelSwapFulfillment = (\n  orderId: string,\n  options?: UseMutationOptions<\n    Response<AdminOrdersRes>,\n    Error,\n    { swap_id: string; fulfillment_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      swap_id,\n      fulfillment_id,\n    }: {\n      swap_id: string\n      fulfillment_id: string\n    }) =>\n      client.admin.orders.cancelSwapFulfillment(\n        orderId,\n        swap_id,\n        fulfillment_id\n      ),\n    buildOptions(\n      queryClient,\n      [adminOrderKeys.detail(orderId), adminSwapKeys.lists()],\n      options\n    )\n  )\n}\n","import { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\n\nimport { AdminCustomersRes, AdminPostCustomersReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\n\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminCustomerKeys } from \"./queries\"\n\nexport const useAdminCreateCustomer = (\n  options?: UseMutationOptions<\n    Response<AdminCustomersRes>,\n    Error,\n    AdminPostCustomersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostCustomersReq) => client.admin.customers.create(payload),\n    buildOptions(queryClient, adminCustomerKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateCustomer = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminCustomersRes>,\n    Error,\n    AdminPostCustomersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCustomersReq) =>\n      client.admin.customers.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminDiscountsDeleteRes,\n  AdminDiscountsRes,\n  AdminPostDiscountsDiscountConditions,\n  AdminPostDiscountsDiscountConditionsCondition,\n  AdminPostDiscountsDiscountDynamicCodesReq,\n  AdminPostDiscountsDiscountReq,\n  AdminPostDiscountsReq\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminDiscountKeys } from \"./queries\"\n\nexport const useAdminCreateDiscount = (\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsReq) => client.admin.discounts.create(payload),\n    buildOptions(queryClient, adminDiscountKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateDiscount = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountReq) =>\n      client.admin.discounts.update(id, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDeleteDiscount = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.discounts.delete(id),\n    buildOptions(queryClient, adminDiscountKeys.lists(), options)\n  )\n}\n\nexport const useAdminDiscountAddRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (regionId: string) => client.admin.discounts.addRegion(id, regionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDiscountRemoveRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (regionId: string) => client.admin.discounts.removeRegion(id, regionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(id), options)\n  )\n}\n\nexport const useAdminCreateDynamicDiscountCode = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountDynamicCodesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountDynamicCodesReq) =>\n      client.admin.discounts.createDynamicCode(id, payload),\n    buildOptions(\n      queryClient,\n      [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteDynamicDiscountCode = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDiscountsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (code: string) => client.admin.discounts.deleteDynamicCode(id, code),\n    buildOptions(\n      queryClient,\n      [adminDiscountKeys.lists(), adminDiscountKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDiscountCreateCondition = (\n  discountId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditions\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditions) =>\n      client.admin.discounts.createCondition(discountId, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDiscountUpdateCondition = (\n  discountId: string,\n  conditionId: string,\n  options?: UseMutationOptions<\n    Response<AdminDiscountsRes>,\n    Error,\n    AdminPostDiscountsDiscountConditionsCondition\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDiscountsDiscountConditionsCondition) =>\n      client.admin.discounts.updateCondition(discountId, conditionId, payload),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n\nexport const useAdminDiscountRemoveCondition = (\n  discountId: string,\n  options?: UseMutationOptions<Response<AdminDiscountsDeleteRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (conditionId: string) =>\n      client.admin.discounts.deleteCondition(discountId, conditionId),\n    buildOptions(queryClient, adminDiscountKeys.detail(discountId), options)\n  )\n}\n","import {\n  AdminDraftOrdersDeleteRes,\n  AdminDraftOrdersRes,\n  AdminPostDraftOrdersDraftOrderLineItemsItemReq,\n  AdminPostDraftOrdersDraftOrderLineItemsReq,\n  AdminPostDraftOrdersDraftOrderRegisterPaymentRes,\n  AdminPostDraftOrdersDraftOrderReq,\n  AdminPostDraftOrdersReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminDraftOrderKeys } from \"./queries\"\n\nexport const useAdminCreateDraftOrder = (\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersReq) =>\n      client.admin.draftOrders.create(payload),\n    buildOptions(queryClient, adminDraftOrderKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateDraftOrder = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderReq) =>\n      client.admin.draftOrders.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteDraftOrder = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDraftOrdersDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.draftOrders.delete(id),\n    buildOptions(\n      queryClient,\n      [adminDraftOrderKeys.detail(id), adminDraftOrderKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDraftOrderRegisterPayment = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPostDraftOrdersDraftOrderRegisterPaymentRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.draftOrders.markPaid(id),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderAddLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostDraftOrdersDraftOrderLineItemsReq) =>\n      client.admin.draftOrders.addLineItem(id, payload),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderRemoveLineItem = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDraftOrdersRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (itemId: string) => client.admin.draftOrders.removeLineItem(id, itemId),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n\nexport const useAdminDraftOrderUpdateLineItem = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDraftOrdersRes>,\n    Error,\n    AdminPostDraftOrdersDraftOrderLineItemsItemReq & { item_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    ({\n      item_id,\n      ...payload\n    }: AdminPostDraftOrdersDraftOrderLineItemsItemReq & { item_id: string }) =>\n      client.admin.draftOrders.updateLineItem(id, item_id, payload),\n    buildOptions(queryClient, adminDraftOrderKeys.detail(id), options)\n  )\n}\n","import {\n  AdminGiftCardsDeleteRes,\n  AdminGiftCardsRes,\n  AdminPostGiftCardsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminGiftCardKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateGiftCard = (\n  options?: UseMutationOptions<\n    Response<AdminGiftCardsRes>,\n    Error,\n    AdminPostGiftCardsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostGiftCardsReq) => client.admin.giftCards.create(payload),\n    buildOptions(queryClient, adminGiftCardKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateGiftCard = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminGiftCardsRes>,\n    Error,\n    AdminPostGiftCardsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostGiftCardsReq) =>\n      client.admin.giftCards.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteGiftCard = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminGiftCardsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    () => client.admin.giftCards.delete(id),\n    buildOptions(\n      queryClient,\n      [adminGiftCardKeys.lists(), adminGiftCardKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminNotesDeleteRes,\n  AdminNotesRes,\n  AdminPostNotesNoteReq,\n  AdminPostNotesReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminNoteKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateNote = (\n  options?: UseMutationOptions<\n    Response<AdminNotesRes>,\n    Error,\n    AdminPostNotesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostNotesReq) => client.admin.notes.create(payload),\n    buildOptions(queryClient, adminNoteKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateNote = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminNotesRes>,\n    Error,\n    AdminPostNotesNoteReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostNotesNoteReq) => client.admin.notes.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminNoteKeys.detail(id), adminNoteKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteNote = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminNotesDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.notes.delete(id),\n    buildOptions(\n      queryClient,\n      [adminNoteKeys.detail(id), adminNoteKeys.lists()],\n      options\n    )\n  )\n}\n","import {\n  AdminDeleteUploadsReq,\n  IAdminPostUploadsFileReq,\n  AdminDeleteUploadsRes,\n  AdminPostUploadsDownloadUrlReq,\n  AdminUploadsDownloadUrlRes,\n  AdminUploadsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminUploadFile = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsRes>,\n    Error,\n    IAdminPostUploadsFileReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation((payload: IAdminPostUploadsFileReq) => {\n    return client.admin.uploads.create(payload)\n  }, buildOptions(queryClient, undefined, options))\n}\n\nexport const useAdminCreatePresignedDownloadUrl = (\n  options?: UseMutationOptions<\n    Response<AdminUploadsDownloadUrlRes>,\n    Error,\n    AdminPostUploadsDownloadUrlReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostUploadsDownloadUrlReq) =>\n      client.admin.uploads.getPresignedDownloadUrl(payload),\n    buildOptions(queryClient, undefined, options)\n  )\n}\n\nexport const useAdminDeleteFile = (\n  options?: UseMutationOptions<\n    Response<AdminDeleteUploadsRes>,\n    Error,\n    AdminDeleteUploadsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteUploadsReq) => client.admin.uploads.delete(payload),\n    buildOptions(queryClient, undefined, options)\n  )\n}\n","import {\n  AdminPriceListRes,\n  AdminPostPriceListsPriceListPriceListReq,\n  AdminPostPriceListsPriceListReq,\n  AdminPostPriceListPricesPricesReq,\n  AdminDeletePriceListPricesPricesReq,\n  AdminPriceListDeleteRes,\n  AdminPriceListDeleteBatchRes,\n  AdminPriceListDeleteProductPricesRes,\n  AdminPriceListDeleteVariantPricesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\nimport { adminPriceListKeys } from \"./queries\"\nimport { adminProductKeys } from \"../products\"\nimport { adminVariantKeys } from \"../variants\"\n\nexport const useAdminCreatePriceList = (\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListsPriceListReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPriceListsPriceListReq) =>\n      client.admin.priceLists.create(payload),\n    buildOptions(queryClient, adminPriceListKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdatePriceList = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListsPriceListPriceListReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostPriceListsPriceListPriceListReq) =>\n      client.admin.priceLists.update(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceList = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminPriceListDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.delete(id),\n    buildOptions(\n      queryClient,\n      [adminPriceListKeys.detail(id), adminPriceListKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminCreatePriceListPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListRes>,\n    Error,\n    AdminPostPriceListPricesPricesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostPriceListPricesPricesReq) =>\n      client.admin.priceLists.addPrices(id, payload),\n    buildOptions(\n      queryClient,\n      [adminPriceListKeys.lists(), adminPriceListKeys.detailProducts(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListPrices = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteBatchRes>,\n    Error,\n    AdminDeletePriceListPricesPricesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeletePriceListPricesPricesReq) =>\n      client.admin.priceLists.deletePrices(id, payload),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminPriceListKeys.detailProducts(id),\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListProductPrices = (\n  id: string,\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteProductPricesRes>,\n    Error\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.deleteProductPrices(id, productId),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminProductKeys.detail(productId)\n      ],\n      options\n    )\n  )\n}\n\nexport const useAdminDeletePriceListVariantPrices = (\n  id: string,\n  variantId: string,\n  options?: UseMutationOptions<\n    Response<AdminPriceListDeleteVariantPricesRes>,\n    Error\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.priceLists.deleteVariantPrices(id, variantId),\n    buildOptions(\n      queryClient,\n      [\n        adminPriceListKeys.detail(id),\n        adminPriceListKeys.lists(),\n        adminVariantKeys.detail(variantId)\n      ],\n      options\n    )\n  )\n}\n","import { adminProductKeys } from \"./queries\"\nimport {\n  AdminProductsDeleteRes,\n  AdminProductsRes,\n  AdminPostProductsProductReq,\n  AdminPostProductsReq,\n  AdminPostProductsProductVariantsReq,\n  AdminProductsDeleteVariantRes,\n  AdminPostProductsProductOptionsReq,\n  AdminPostProductsProductOptionsOption,\n  AdminProductsDeleteOptionRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateProduct = (\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostProductsReq) => client.admin.products.create(payload),\n    buildOptions(queryClient, adminProductKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateProduct = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductReq) =>\n      client.admin.products.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProduct = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminProductsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.products.delete(id),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductVariantsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductVariantsReq) =>\n      client.admin.products.createVariant(productId, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminUpdateVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductVariantsReq & { variant_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      variant_id,\n      ...payload\n    }: AdminPostProductsProductVariantsReq & { variant_id: string }) =>\n      client.admin.products.updateVariant(productId, variant_id, payload),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteVariant = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsDeleteVariantRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (variantId: string) =>\n      client.admin.products.deleteVariant(productId, variantId),\n    buildOptions(\n      queryClient,\n      [adminProductKeys.lists(), adminProductKeys.detail(productId)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostProductsProductOptionsReq) =>\n      client.admin.products.addOption(productId, payload),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n\nexport const useAdminUpdateProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsRes>,\n    Error,\n    AdminPostProductsProductOptionsOption & { option_id: string }\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    ({\n      option_id,\n      ...payload\n    }: AdminPostProductsProductOptionsOption & { option_id: string }) =>\n      client.admin.products.updateOption(productId, option_id, payload),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n\nexport const useAdminDeleteProductOption = (\n  productId: string,\n  options?: UseMutationOptions<\n    Response<AdminProductsDeleteOptionRes>,\n    Error,\n    string\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (optionId: string) =>\n      client.admin.products.deleteOption(productId, optionId),\n    buildOptions(queryClient, adminProductKeys.detail(productId), options)\n  )\n}\n","import { adminTaxRateKeys } from \"./queries\"\nimport {\n  AdminTaxRatesRes,\n  AdminTaxRatesDeleteRes,\n  AdminDeleteTaxRatesTaxRateProductsReq,\n  AdminDeleteTaxRatesTaxRateProductTypesReq,\n  AdminDeleteTaxRatesTaxRateShippingOptionsReq,\n  AdminPostTaxRatesReq,\n  AdminPostTaxRatesTaxRateReq,\n  AdminPostTaxRatesTaxRateProductsReq,\n  AdminPostTaxRatesTaxRateProductTypesReq,\n  AdminPostTaxRatesTaxRateShippingOptionsReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateTaxRate = (\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostTaxRatesReq) => client.admin.taxRates.create(payload),\n    buildOptions(queryClient, adminTaxRateKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateTaxRate = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateReq) =>\n      client.admin.taxRates.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteTaxRate = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminTaxRatesDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.taxRates.delete(id),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateProductsReq) =>\n      client.admin.taxRates.addProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProductTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateProductsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateProductsReq) =>\n      client.admin.taxRates.removeProducts(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateProductTypeTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateProductTypesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateProductTypesReq) =>\n      client.admin.taxRates.addProductTypes(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteProductTypeTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateProductTypesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateProductTypesReq) =>\n      client.admin.taxRates.removeProductTypes(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminCreateShippingTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminPostTaxRatesTaxRateShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostTaxRatesTaxRateShippingOptionsReq) =>\n      client.admin.taxRates.addShippingOptions(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingTaxRates = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminTaxRatesRes>,\n    Error,\n    AdminDeleteTaxRatesTaxRateShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminDeleteTaxRatesTaxRateShippingOptionsReq) =>\n      client.admin.taxRates.removeShippingOptions(id, payload),\n    buildOptions(\n      queryClient,\n      [adminTaxRateKeys.lists(), adminTaxRateKeys.detail(id)],\n      options\n    )\n  )\n}\n","import { adminRegionKeys } from \"./queries\"\nimport {\n  AdminRegionsDeleteRes,\n  AdminRegionsRes,\n  AdminPostRegionsRegionReq,\n  AdminPostRegionsReq,\n  AdminPostRegionsRegionCountriesReq,\n  AdminPostRegionsRegionFulfillmentProvidersReq,\n  AdminPostRegionsRegionPaymentProvidersReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateRegion = (\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsReq) => client.admin.regions.create(payload),\n    buildOptions(queryClient, adminRegionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateRegion = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionReq) =>\n      client.admin.regions.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminRegionKeys.lists(), adminRegionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteRegion = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsDeleteRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.regions.delete(id),\n    buildOptions(\n      queryClient,\n      [adminRegionKeys.lists(), adminRegionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminRegionAddCountry = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionCountriesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionCountriesReq) =>\n      client.admin.regions.addCountry(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionRemoveCountry = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (country_code: string) =>\n      client.admin.regions.deleteCountry(id, country_code),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddFulfillmentProvider = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionFulfillmentProvidersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionFulfillmentProvidersReq) =>\n      client.admin.regions.addFulfillmentProvider(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionDeleteFulfillmentProvider = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (provider_id: string) =>\n      client.admin.regions.deleteFulfillmentProvider(id, provider_id),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionAddPaymentProvider = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminRegionsRes>,\n    Error,\n    AdminPostRegionsRegionPaymentProvidersReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostRegionsRegionPaymentProvidersReq) =>\n      client.admin.regions.addPaymentProvider(id, payload),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n\nexport const useAdminRegionDeletePaymentProvider = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminRegionsRes>, Error, string>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (provider_id: string) =>\n      client.admin.regions.deletePaymentProvider(id, provider_id),\n    buildOptions(queryClient, adminRegionKeys.detail(id), options)\n  )\n}\n","import {\n  AdminPostReturnReasonsReasonReq,\n  AdminPostReturnReasonsReq,\n  AdminReturnReasonsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminReturnReasonKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateReturnReason = (\n  options?: UseMutationOptions<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    AdminPostReturnReasonsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReturnReasonsReq) =>\n      client.admin.returnReasons.create(payload),\n    buildOptions(queryClient, adminReturnReasonKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateReturnReason = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminReturnReasonsRes>,\n    Error,\n    AdminPostReturnReasonsReasonReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostReturnReasonsReasonReq) =>\n      client.admin.returnReasons.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteReturnReason = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.returnReasons.delete(id),\n    buildOptions(\n      queryClient,\n      [adminReturnReasonKeys.detail(id), adminReturnReasonKeys.lists()],\n      options\n    )\n  )\n}\n","import { adminShippingOptionKeys } from \"./queries\"\nimport {\n  AdminPostShippingOptionsOptionReq,\n  AdminPostShippingOptionsReq,\n  AdminShippingOptionsRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateShippingOption = (\n  options?: UseMutationOptions<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    AdminPostShippingOptionsReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingOptionsReq) =>\n      client.admin.shippingOptions.create(payload),\n    buildOptions(queryClient, adminShippingOptionKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateShippingOption = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminShippingOptionsRes>,\n    Error,\n    AdminPostShippingOptionsOptionReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingOptionsOptionReq) =>\n      client.admin.shippingOptions.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingOption = (\n  id: string,\n  options?: UseMutationOptions\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.shippingOptions.delete(id),\n    buildOptions(\n      queryClient,\n      [adminShippingOptionKeys.lists(), adminShippingOptionKeys.detail(id)],\n      options\n    )\n  )\n}\n","import { adminShippingProfileKeys } from \"./queries\"\nimport {\n  AdminDeleteShippingProfileRes,\n  AdminPostShippingProfilesReq,\n  AdminShippingProfilesRes,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateShippingProfile = (\n  options?: UseMutationOptions<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    AdminPostShippingProfilesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostShippingProfilesReq) =>\n      client.admin.shippingProfiles.create(payload),\n    buildOptions(queryClient, adminShippingProfileKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateShippingProfile = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminShippingProfilesRes>,\n    Error,\n    AdminPostShippingProfilesReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostShippingProfilesReq) =>\n      client.admin.shippingProfiles.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteShippingProfile = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminDeleteShippingProfileRes>,\n    Error,\n    void\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.shippingProfiles.delete(id),\n    buildOptions(\n      queryClient,\n      [adminShippingProfileKeys.lists(), adminShippingProfileKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminDeleteUserRes,\n  AdminResetPasswordRequest,\n  AdminResetPasswordTokenRequest,\n  AdminUserRes,\n} from \"@medusajs/medusa\"\nimport {\n  AdminCreateUserPayload,\n  AdminUpdateUserPayload,\n  Response,\n} from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminCustomerKeys } from \"..\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminCreateUser = (\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminCreateUserPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminCreateUserPayload) => client.admin.users.create(payload),\n    buildOptions(queryClient, adminCustomerKeys.lists(), options)\n  )\n}\n\nexport const useAdminUpdateUser = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminUpdateUserPayload\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminUpdateUserPayload) => client.admin.users.update(id, payload),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.lists(), adminCustomerKeys.detail(id)],\n      options\n    )\n  )\n}\n\nexport const useAdminDeleteUser = (\n  id: string,\n  options?: UseMutationOptions<Response<AdminDeleteUserRes>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.users.delete(id),\n    buildOptions(\n      queryClient,\n      [adminCustomerKeys.detail(id), adminCustomerKeys.lists()],\n      options\n    )\n  )\n}\n\nexport const useAdminResetPassword = (\n  options?: UseMutationOptions<\n    Response<AdminUserRes>,\n    Error,\n    AdminResetPasswordRequest\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (payload: AdminResetPasswordRequest) =>\n      client.admin.users.resetPassword(payload),\n    options\n  )\n}\n\nexport const useAdminSendResetPasswordToken = (\n  options?: UseMutationOptions<\n    Response<void>,\n    Error,\n    AdminResetPasswordTokenRequest\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (payload: AdminResetPasswordTokenRequest) =>\n      client.admin.users.sendResetPasswordToken(payload),\n    options\n  )\n}\n","import { AdminAuthRes, AdminPostAuthReq } from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminAuthKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminLogin = (\n  options?: UseMutationOptions<Response<AdminAuthRes>, Error, AdminPostAuthReq>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostAuthReq) => client.admin.auth.createSession(payload),\n    buildOptions(queryClient, adminAuthKeys.details(), options)\n  )\n}\n\nexport const useAdminDeleteSession = (\n  options?: UseMutationOptions<Response<void>, Error, void>\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    () => client.admin.auth.deleteSession(),\n    buildOptions(queryClient, adminAuthKeys.details(), options)\n  )\n}\n","import {\n  AdminNotificationsRes,\n  AdminPostNotificationsNotificationResendReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { adminNotificationKeys } from \"./queries\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminResendNotification = (\n  id: string,\n  options?: UseMutationOptions<\n    Response<AdminNotificationsRes>,\n    Error,\n    AdminPostNotificationsNotificationResendReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n\n  return useMutation(\n    (payload: AdminPostNotificationsNotificationResendReq) =>\n      client.admin.notifications.resend(id, payload),\n    buildOptions(\n      queryClient,\n      [adminNotificationKeys.lists(), adminNotificationKeys.detail(id)],\n      options\n    )\n  )\n}\n","import {\n  AdminCurrenciesRes,\n  AdminPostCurrenciesCurrencyReq,\n} from \"@medusajs/medusa\"\nimport { Response } from \"@medusajs/medusa-js\"\nimport { useMutation, UseMutationOptions, useQueryClient } from \"react-query\"\nimport { adminCurrenciesKeys } from \".\"\nimport { useMedusa } from \"../../../contexts/medusa\"\nimport { buildOptions } from \"../../utils/buildOptions\"\n\nexport const useAdminUpdateCurrency = (\n  code: string,\n  options?: UseMutationOptions<\n    Response<AdminCurrenciesRes>,\n    Error,\n    AdminPostCurrenciesCurrencyReq\n  >\n) => {\n  const { client } = useMedusa()\n  const queryClient = useQueryClient()\n  return useMutation(\n    (payload: AdminPostCurrenciesCurrencyReq) =>\n      client.admin.currencies.update(code, payload),\n    buildOptions(\n      queryClient,\n      [adminCurrenciesKeys.lists(), adminCurrenciesKeys.detail(code)],\n      options\n    )\n  )\n}\n","import {\n  StoreCustomersRes,\n  StorePostCustomersCustomerReq,\n  StorePostCustomersReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts/medusa\"\n\nexport const useCreateCustomer = (\n  options?: UseMutationOptions<StoreCustomersRes, Error, StorePostCustomersReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCustomersReq) => client.customers.create(data),\n    options\n  )\n}\n\nexport const useUpdateMe = (\n  options?: UseMutationOptions<\n    StoreCustomersRes,\n    Error,\n    { id: string } & StorePostCustomersCustomerReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ id, ...data }: { id: string } & StorePostCustomersCustomerReq) =>\n      client.customers.update(data),\n    options\n  )\n}\n","import {\n  StoreCartsRes,\n  StorePostCartsCartLineItemsReq,\n  StorePostCartsCartLineItemsItemReq,\n} from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartLineItemsReq\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostCartsCartLineItemsReq) =>\n      client.carts.lineItems.create(cartId, data),\n    options\n  )\n}\n\nexport const useUpdateLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<\n    StoreCartsRes,\n    Error,\n    StorePostCartsCartLineItemsItemReq & { lineId: string }\n  >\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({\n      lineId,\n      ...data\n    }: StorePostCartsCartLineItemsItemReq & { lineId: string }) =>\n      client.carts.lineItems.update(cartId, lineId, data),\n    options\n  )\n}\n\nexport const useDeleteLineItem = (\n  cartId: string,\n  options?: UseMutationOptions<StoreCartsRes, Error, { lineId: string }>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    ({ lineId }: { lineId: string }) =>\n      client.carts.lineItems.delete(cartId, lineId),\n    options\n  )\n}\n","import { StoreReturnsRes, StorePostReturnsReq } from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateReturn = (\n  options?: UseMutationOptions<StoreReturnsRes, Error, StorePostReturnsReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostReturnsReq) => client.returns.create(data),\n    options\n  )\n}\n","import { StoreSwapsRes, StorePostSwapsReq } from \"@medusajs/medusa\"\nimport { useMutation, UseMutationOptions } from \"react-query\"\nimport { useMedusa } from \"../../../contexts\"\n\nexport const useCreateSwap = (\n  options?: UseMutationOptions<StoreSwapsRes, Error, StorePostSwapsReq>\n) => {\n  const { client } = useMedusa()\n  return useMutation(\n    (data: StorePostSwapsReq) => client.swaps.create(data),\n    options\n  )\n}\n"],"names":["ACTION_TYPES","MedusaContext","React","createContext","useMedusa","context","useContext","Error","queryKeysFactory","globalKey","queryKeyFactory","all","lists","concat","list","query","details","detail","id","computeVariantPrice","_ref2","region","_ref2$includeTaxes","includeTaxes","amount","getVariantPrice","variant","computeAmount","_variant$prices","price","prices","find","p","_region$currency_code","currency_code","toLowerCase","_ref3","_ref3$includeTaxes","convertToDecimal","getTaxRate","noDivisionCurrencies","_region$currency_code2","divisor","includes","Math","floor","isEmpty","tax_rate","convertToLocale","_ref5","minimumFractionDigits","maximumFractionDigits","_ref5$locale","locale","Intl","NumberFormat","style","currency","format","toString","SessionCartContext","reducer","state","action","type","INIT","SET_REGION","generateCartState","payload","items","ADD_ITEM","duplicateVariantIndex","findIndex","item","_action$payload","_action$payload$varia","splice","UPDATE_ITEM","map","REMOVE_ITEM","filter","SET_ITEMS","CLEAR_ITEMS","_extends","total","totalItems","newItems","generateItems","reduce","sum","quantity","calculateSessionCartTotal","defaultInitialState","productKeys","cartKeys","useCreateCart","options","client","useMutation","data","carts","create","useUpdateCart","cartId","update","useCompleteCart","complete","useCreatePaymentSession","createPaymentSessions","useSetPaymentSession","setPaymentSession","useAddShippingMethodToCart","addShippingMethod","shippingOptionKey","cart","regionsKey","returnReasonsKey","swapKey","orderKeys","customerKeys","orders","giftCardKeys","collectionKeys","CartContext","adminAuthKeys","buildOptions","queryClient","queryKey","onSuccess","apply","arguments","undefined","Array","isArray","length","forEach","key","invalidateQueries","adminBatchJobsKeys","adminOrderKeys","adminCollectionKeys","adminCurrenciesKeys","adminCustomerGroupKeys","detailCustomer","this","adminCustomerKeys","adminDiscountKeys","detailCondition","adminDraftOrderKeys","adminGiftCardKeys","adminInviteKeys","adminNoteKeys","adminNotificationKeys","adminPriceListKeys","detailProducts","adminProductKeys","adminVariantKeys","adminProductTagKeys","adminProductTypeKeys","adminRegionKeys","adminReturnReasonKeys","adminReturnKeys","adminSalesChannelsKeys","adminShippingOptionKeys","adminShippingProfileKeys","adminStoreKeys","adminSwapKeys","adminTaxRateKeys","adminUserKeys","_ref","children","_ref$initialState","initialState","useState","_useState","setCart","createCart","updateCart","_ref4","startCheckout","pay","_ref6","completeCheckout","i","acc","curr","createElement","Provider","value","queryClientProviderProps","medusaClient","Medusa","baseUrl","maxRetries","apiKey","QueryClientProvider","_React$useState","setItem","useLocalStorage","JSON","stringify","window","localStorage","getItem","err","removeItem","save","_useLocalStorage","_React$useReducer","useReducer","parse","dispatch","useEffect","setRegion","isObject","addItem","updateItem","updateItemQuantity","min","inventory_quantity","incrementItemQuantity","decrementItemQuantity","max","setItems","clearItems","_ref4$includeTaxes","rest","_objectWithoutPropertiesLoose","_excluded2","taxAwareAmount","_ref$includeTaxes","_excluded","useQueryClient","admin","invites","accept","customerGroups","addCustomers","collections","addProducts","salesChannels","sales_channel_id","orderId","store","deleteCurrency","archive","useQuery","batchJobs","retrieve","_useQuery2","_useQuery","cancel","claimId","cancelClaim","cancelClaimFulfillment","claim_id","fulfillment_id","fulfillmentId","cancelFulfillment","returns","swapId","cancelSwap","cancelSwapFulfillment","swap_id","capturePayment","confirm","createClaim","_excluded3","createClaimShipment","customers","discounts","draftOrders","createDynamicCode","createFulfillment","giftCards","notes","uploads","getPresignedDownloadUrl","priceLists","addPrices","products","productId","addOption","taxRates","addProductTypes","regions","returnReasons","createShipment","shippingOptions","shippingProfiles","addShippingOptions","createSwap","createSwapShipment","users","createVariant","currencies","listCustomers","_useQuery3","code","deleteDynamicCode","deletePrices","deleteProductPrices","variantId","deleteVariantPrices","optionId","deleteOption","removeProducts","removeProductTypes","auth","deleteSession","removeShippingOptions","deleteVariant","regionId","addRegion","discountId","createCondition","conditionId","deleteCondition","removeRegion","updateCondition","addLineItem","markPaid","itemId","removeLineItem","item_id","updateLineItem","fulfillClaim","fulfillSwap","retrieveByCode","getCondition","_useQuery4","_excluded4","getSession","createSession","notifications","listProducts","processSwapPayment","listTags","productTags","productTypes","receive","refundPayment","addCountry","addFulfillmentProvider","addPaymentProvider","provider_id","deleteFulfillmentProvider","deletePaymentProvider","retrieveFulfillmentOptions","country_code","deleteCountry","removeCustomers","requestReturn","resend","resetPassword","sendResetPasswordToken","listPaymentProviders","listTaxProviders","swaps","updateClaim","option_id","updateOption","variant_id","updateVariant","variants","retrieveByCartId","_asyncToGenerator","_regeneratorRuntime","mark","_callee2","wrap","_context2","prev","next","abrupt","listCartOptions","stop","lineItems","limit","offset","listOrders","lineId","deletePaymentSession","lookupOrder","refreshPaymentSession","_callee","_context","mutation","sent","res","_x","updatePaymentSession"],"mappings":"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"}